{"version":3,"sources":["../../src/commands/base.js"],"names":["projectBaseUri","path","resolve","__dirname","Base","Command","signature","description","handle","args","options","log","execute","catch","e","stack","message","rawMessage","arguments","_","isString","JSON","stringify","triggerAt","format","DATE_FORMAT","DISPLAY_BY_MILLSECOND","console","constructor","name","logger","Logger","getLogger4Command","info","warn","dispatchParseCommand","commandName","startTime","endTime","execCommand","argvString","map","arg","join","command","commandStartAtFormated","commandStartAtms","valueOf","shell","exec","async","silent","commandFinishAtFormated","commandFinishAtms","during"],"mappings":"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","sourcesContent":["// https://developer.aliyun.com/mirror/npm/package/@adonisjs/ace\n\nimport { Command } from '@adonisjs/ace'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport DATE_FORMAT from '../constants/date_format'\nimport Logger from '../library/logger'\nimport path from 'path'\nlet projectBaseUri = path.resolve(__dirname, '../../') // 项目所在文件夹\nimport shell from 'shelljs'\n\nclass Base extends Command {\n    static get signature() {\n        return `\n            Parse:Base\n            \n            {--onlyFlag:[必传]flag,只有true/false两个值} \n            {--logName=@value:[必传]日志文件名} \n            {--isTest?=@value:[可选]是否处于测试环境}\n        `\n    }\n\n    static get description() {\n        return '解析kafka日志, Base'\n    }\n\n    /**\n     * 在最外层进行一次封装, 方便获得报错信息\n     * @param args\n     * @param options\n     * @returns {Promise<void>}\n     */\n    async handle(args, options) {\n        this.log('command start')\n        await this.execute(args, options).catch(e => {\n            this.log('catch error')\n            this.log(e.stack)\n        })\n        this.log('command finish')\n    }\n\n    async execute(args, options) {\n\n    }\n\n    /**\n     * 简易logger\n     * @returns  null\n     */\n    async log() {\n        let message = ''\n        for (let rawMessage of arguments) {\n            if (_.isString(rawMessage) === false) {\n                message = message + JSON.stringify(rawMessage)\n            } else {\n                message = message + rawMessage\n            }\n        }\n        let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n        console.log(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n        let logger = Logger.getLogger4Command(this.constructor.name)\n        logger.info(message)\n    }\n\n    /**\n     * 简易logger\n     * @returns  null\n     */\n    async warn() {\n        let message = ''\n        for (let rawMessage of arguments) {\n            if (_.isString(rawMessage) === false) {\n                message = message + JSON.stringify(rawMessage)\n            } else {\n                message = message + rawMessage\n            }\n        }\n        let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n        console.warn(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n        let logger = Logger.getLogger4Command(this.constructor.name)\n        logger.warn(message)\n    }\n\n    /**\n     * 分发日志Parse命令\n     * @param {*} commandName \n     * @param {*} startTime \n     * @param {*} endTime \n     */\n    async dispatchParseCommand(commandName, startTime, endTime) {\n        this.log(`${commandName}任务开始, 处理时间 => ${startTime}, ${endTime}`)\n        this.execCommand(commandName,\n            [\n                startTime,\n                endTime\n            ]\n        )\n    }\n\n    /**\n     * 执行脚本\n     * @param {*} commandName \n     * @param {*} args \n     */\n    async execCommand(commandName, args = []) {\n        let argvString = args.map((arg) => { return `'${arg}'` }).join('   ')\n        let command = `NODE_ENV=production node ${projectBaseUri}/dist/command.js ${commandName}  ${argvString}`\n        this.log(`待执行命令=> ${command}`)\n        let commandStartAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n        let commandStartAtms = moment().valueOf()\n        shell.exec(command, {\n            async: true,\n            silent: true\n        }, () => {\n            let commandFinishAtFormated = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n            let commandFinishAtms = moment().valueOf()\n            let during = (commandFinishAtms - commandStartAtms) / 1000\n            this.log(`${command}命令执行完毕, 共用时${during}秒, 开始执行时间=> ${commandStartAtFormated}, 执行完毕时间=> ${commandFinishAtFormated}`)\n        })\n    }\n}\n\nexport default Base\n"],"file":"base.js"}