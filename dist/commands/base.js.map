{"version":3,"sources":["../../src/commands/base.js"],"names":["Base","Command","signature","description","handle","args","options","log","execute","catch","e","stack","message","rawMessage","arguments","_","isString","JSON","stringify","triggerAt","format","DATE_FORMAT","DISPLAY_BY_MILLSECOND","console","constructor","name","logger","Logger","getLogger4Command","info","warn"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,IAAN,SAAmBC,YAAnB,CAA2B;AACvB,aAAWC,SAAX,GAAuB;AACnB,WAAQ;;;;;;SAAR;AAOH;;AAED,aAAWC,WAAX,GAAyB;AACrB,WAAO,iBAAP;AACH;AAED;;;;;;;;AAMUC,EAAAA,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;AACxB,MAAA,KAAI,CAACC,GAAL,CAAS,eAAT;;AACA,YAAM,KAAI,CAACC,OAAL,CAAaH,IAAb,EAAmBC,OAAnB,EAA4BG,KAA5B,CAAkCC,CAAC,IAAI;AACzC,QAAA,KAAI,CAACH,GAAL,CAAS,aAAT;;AACA,QAAA,KAAI,CAACA,GAAL,CAASG,CAAC,CAACC,KAAX;AACH,OAHK,CAAN;;AAIA,MAAA,KAAI,CAACJ,GAAL,CAAS,gBAAT;AANwB;AAO3B;;AAECC,EAAAA,OAAN,CAAcH,IAAd,EAAoBC,OAApB,EAA6B;AAAA;AAE5B;AAED;;;;;;AAIMC,EAAAA,GAAN,GAAY;AAAA;AAAA;;AAAA;AACR,UAAIK,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIC,UAAT,IAAuBC,UAAvB,EAAkC;AAC9B,YAAIC,gBAAEC,QAAF,CAAWH,UAAX,MAA2B,KAA/B,EAAsC;AAClCD,UAAAA,OAAO,GAAGA,OAAO,GAAGK,IAAI,CAACC,SAAL,CAAeL,UAAf,CAApB;AACH,SAFD,MAEO;AACHD,UAAAA,OAAO,GAAGA,OAAO,GAAGC,UAApB;AACH;AACJ;;AACD,UAAIM,SAAS,GAAG,uBAASC,MAAT,CAAgBC,qBAAYC,qBAA5B,CAAhB;AACAC,MAAAA,OAAO,CAAChB,GAAR,CAAa,IAAGY,SAAU,MAAK,MAAI,CAACK,WAAL,CAAiBC,IAAK,IAAzC,GAA+Cb,OAA3D;;AACA,UAAIc,MAAM,GAAGC,gBAAOC,iBAAP,CAAyB,MAAI,CAACJ,WAAL,CAAiBC,IAA1C,CAAb;;AACAC,MAAAA,MAAM,CAACG,IAAP,CAAYjB,OAAZ;AAZQ;AAaX;AAED;;;;;;AAIMkB,EAAAA,IAAN,GAAa;AAAA;AAAA;;AAAA;AACT,UAAIlB,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIC,UAAT,IAAuBC,WAAvB,EAAkC;AAC9B,YAAIC,gBAAEC,QAAF,CAAWH,UAAX,MAA2B,KAA/B,EAAsC;AAClCD,UAAAA,OAAO,GAAGA,OAAO,GAAGK,IAAI,CAACC,SAAL,CAAeL,UAAf,CAApB;AACH,SAFD,MAEO;AACHD,UAAAA,OAAO,GAAGA,OAAO,GAAGC,UAApB;AACH;AACJ;;AACD,UAAIM,SAAS,GAAG,uBAASC,MAAT,CAAgBC,qBAAYC,qBAA5B,CAAhB;AACAC,MAAAA,OAAO,CAACO,IAAR,CAAc,IAAGX,SAAU,MAAK,MAAI,CAACK,WAAL,CAAiBC,IAAK,IAAzC,GAA+Cb,OAA5D;;AACA,UAAIc,MAAM,GAAGC,gBAAOC,iBAAP,CAAyB,MAAI,CAACJ,WAAL,CAAiBC,IAA1C,CAAb;;AACAC,MAAAA,MAAM,CAACI,IAAP,CAAYlB,OAAZ;AAZS;AAaZ;;AAtEsB;;eAyEZZ,I","sourcesContent":["// https://developer.aliyun.com/mirror/npm/package/@adonisjs/ace\n\nimport { Command } from '@adonisjs/ace'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport DATE_FORMAT from '../constants/date_format'\nimport Logger from '../library/logger'\n\nclass Base extends Command {\n    static get signature() {\n        return `\n            Parse:Base\n            \n            {--onlyFlag:[必传]flag,只有true/false两个值} \n            {--logName=@value:[必传]日志文件名} \n            {--isTest?=@value:[可选]是否处于测试环境}\n        `\n    }\n\n    static get description() {\n        return '解析kafka日志, Base'\n    }\n\n    /**\n     * 在最外层进行一次封装, 方便获得报错信息\n     * @param args\n     * @param options\n     * @returns {Promise<void>}\n     */\n        async handle(args, options) {\n            this.log('command start')\n            await this.execute(args, options).catch(e => {\n                this.log('catch error')\n                this.log(e.stack)\n            })\n            this.log('command finish')\n        }\n\n    async execute(args, options) {\n\n    }\n\n    /**\n     * 简易logger\n     * @returns  null\n     */\n    async log() {\n        let message = ''\n        for (let rawMessage of arguments) {\n            if (_.isString(rawMessage) === false) {\n                message = message + JSON.stringify(rawMessage)\n            } else {\n                message = message + rawMessage\n            }\n        }\n        let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n        console.log(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n        let logger = Logger.getLogger4Command(this.constructor.name)\n        logger.info(message)\n    }\n\n    /**\n     * 简易logger\n     * @returns  null\n     */\n    async warn() {\n        let message = ''\n        for (let rawMessage of arguments) {\n            if (_.isString(rawMessage) === false) {\n                message = message + JSON.stringify(rawMessage)\n            } else {\n                message = message + rawMessage\n            }\n        }\n        let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n        console.warn(`[${triggerAt}]-[${this.constructor.name}] ` + message)\n        let logger = Logger.getLogger4Command(this.constructor.name)\n        logger.warn(message)\n    }\n}\n\nexport default Base\n"],"file":"base.js"}