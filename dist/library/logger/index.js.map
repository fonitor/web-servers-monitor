{"version":3,"sources":["../../../src/library/logger/index.js"],"names":["baseLoggerConfig","appenders","express","type","filename","config","absoluteLogPath","pattern","alwaysIncludePattern","categories","default","level","loggerCacheMap","Map","getLogger","loggerType","loggerConfig","loggerConfigJSON","JSON","stringify","has","get","log4js","configure","logger","set","getLogger4Command","commandName","command","logger4Express","getStackInfoString","stackReg","stackReg2","stacklist","Error","stack","split","slice","s","sp","exec","data","length","method","path","line","pos","file","basename","log","message","rawMessage","arguments","_","isString","triggerAt","format","DATE_FORMAT","DISPLAY_BY_MILLSECOND","console","info","warn","error"],"mappings":"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","sourcesContent":["import path from 'path'\nimport log4js from 'log4js'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport config from '../../config/app'\nimport DATE_FORMAT from '../../constants/date_format'\n\n\nlet baseLoggerConfig = {\n    appenders: {\n        // command: {\n        //   type: 'dateFile',\n        //   filename: `${config.absoluteLogPath}/command/${commandName}`,\n        //   pattern: '-yyyy-MM-dd.log',\n        //   alwaysIncludePattern: true\n        // },\n        express: {\n            type: 'dateFile',\n            filename: `${config.absoluteLogPath}/express/runtime`,\n            pattern: '-yyyy-MM-dd.log',\n            alwaysIncludePattern: true\n        }\n    },\n    categories: {\n        default: { appenders: ['express'], level: 'info' },\n        // command: { appenders: ['command'], level: 'info' },\n        express: { appenders: ['express'], level: 'info' }\n    }\n}\n\n/**\n * getLogger会重新打开一个文件, 导致文件句柄打开过多, 系统报错退出, 因此需要人工做一层缓存\n */\nlet loggerCacheMap = new Map()\nfunction getLogger(loggerType = 'express', loggerConfig = baseLoggerConfig) {\n    let loggerConfigJSON = JSON.stringify({ loggerType, loggerConfig })\n    if (loggerCacheMap.has(loggerConfigJSON)) {\n        return loggerCacheMap.get(loggerConfigJSON)\n    } else {\n        log4js.configure(loggerConfig)\n        let logger = log4js.getLogger(loggerType)\n        loggerCacheMap.set(loggerConfigJSON, logger)\n        return logger\n    }\n}\n\n/**\n * 为Commande类提供Logger\n * @param {*} commandName\n */\nfunction getLogger4Command(commandName = 'unsetCommandName') {\n    let loggerConfig = {\n        appenders: {\n            command: {\n                type: 'dateFile',\n                filename: `${config.absoluteLogPath}/command/${commandName}`,\n                pattern: 'yyyy-MM-dd.log',\n                alwaysIncludePattern: true\n            },\n            express: {\n                type: 'dateFile',\n                filename: `${config.absoluteLogPath}/express/runtime`,\n                pattern: 'yyyy-MM-dd.log',\n                alwaysIncludePattern: true\n            }\n        },\n        categories: {\n            default: { appenders: ['express'], level: 'info' },\n            command: { appenders: ['command'], level: 'info' },\n            express: { appenders: ['express'], level: 'info' }\n        }\n    }\n\n    return getLogger(`command`, loggerConfig)\n}\n\nlet logger4Express = getLogger(`express`, baseLoggerConfig)\n\n/**\n * 追踪日志输出文件名,方法名,行号等信息\n * @returns Object\n */\nfunction getStackInfoString() {\n    let stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/i\n    let stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/i\n    let stacklist = (new Error()).stack.split('\\n').slice(3)\n    let s = stacklist[0]\n    let sp = stackReg.exec(s) || stackReg2.exec(s)\n    let data = {}\n    if (sp && sp.length === 5) {\n        data.method = sp[1]\n        data.path = sp[2]\n        data.line = sp[3]\n        data.pos = sp[4]\n        data.file = path.basename(data.path)\n    }\n    return JSON.stringify(data)\n}\n\n/**\n * 简易logger\n */\nfunction log() {\n    let message = ''\n    for (let rawMessage of arguments) {\n        if (_.isString(rawMessage) === false) {\n            message = message + JSON.stringify(rawMessage)\n        } else {\n            message = message + rawMessage\n        }\n    }\n    let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    console.log(`[${triggerAt}]-[runtime] ` + message)\n    logger4Express.info(message)\n}\n\nlet info = log // 别名\n\n/**\n* 简易logger\n* @returns  null\n*/\nfunction warn() {\n    let message = ''\n    for (let rawMessage of arguments) {\n        if (_.isString(rawMessage) === false) {\n            message = message + JSON.stringify(rawMessage)\n        } else {\n            message = message + rawMessage\n        }\n    }\n    let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    console.warn(`[${triggerAt}]-[runtime] ` + message + ` => ${getStackInfoString()}`)\n    logger4Express.warn(message + ` => ${getStackInfoString()}`)\n}\n\n/**\n* 简易logger\n* @returns  null\n*/\nfunction error() {\n    let message = ''\n    for (let rawMessage of arguments) {\n        if (_.isString(rawMessage) === false) {\n            message = message + JSON.stringify(rawMessage)\n        } else {\n            message = message + rawMessage\n        }\n    }\n    let triggerAt = moment().format(DATE_FORMAT.DISPLAY_BY_MILLSECOND)\n    console.error(`[${triggerAt}]-[runtime] ` + message + ` => ${getStackInfoString()}`)\n    logger4Express.error(message + ` => ${getStackInfoString()}`)\n}\n\nexport default {\n    getLogger4Command,\n    log,\n    info,\n    warn,\n    error\n}\n"],"file":"index.js"}