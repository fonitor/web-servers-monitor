{"version":3,"sources":["../../../src/library/redis/index.js"],"names":["RedisClient","constructor","isTest","redisClient","Redis","port","redisConfig","host","retryStrategy","hasRetryTimes","lazyConnect","showFriendlyErrorStack","_debounceDisconnect","_","debounce","checkIsConnected","disconnect","_log","hasConnected","isConnected","get","_autoConnect","connect","_autoDisconnect","Logger","log","arguments","asyncGet","key","resultJson","catch","e","result","asyncSetex","expire","value","valueJSON","JSON","stringify","setex","client"],"mappings":"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","sourcesContent":["import redisConfig from '../../config/redis'\nimport Redis from 'ioredis'\nimport _ from 'lodash'\nimport Logger from '../logger'\n\n/**\n * @via(@xiaolin)\n * 原生Redis有这么几个问题\n * 1. 命令没有参数提示\n * 2. 连接Redis后不会自动断开, 导致程序无法正常退出\n * 因此, 在这里手工对ioredis进行了一次手工封装, 添加参数提示和链接自动断开逻辑, 方便使用\n * 目前只用到了setex和get方法, 后续有需要可以再添加\n */\nclass RedisClient {\n    /**\n     * 初始化\n     * @param {*} isTest \n     */\n    constructor(isTest = false) {\n        this.redisClient = new Redis({\n            port: redisConfig.port,\n            host: redisConfig.host,\n            retryStrategy: (hasRetryTimes) => {\n                // 关闭自动重连功能\n                return false\n            },\n            lazyConnect: true, // 初始化时不能连接Redis Server, 否则会因为无法断开连接, 导致npm run start命令不能退出\n            showFriendlyErrorStack: true\n        })\n        this.isTest = isTest\n        // 利用debounce限制当连接空闲1s以上时, 自动断开链接, 避免由于持有连接句柄导致进程无法退出\n        this._debounceDisconnect = _.debounce(async () => {\n            if (this.checkIsConnected() == true) {\n                await this.redisClient.disconnect()\n                this._log(`disconnect success! now connect status change to => ${this.hasConnected}`)\n            }\n        }, 1 * 1000)\n    }\n\n    /**\n     * 判断是否连接\n     * @return {?}\n     */\n    checkIsConnected() {\n        let isConnected = _.get(this.redisClient, ['connector', 'connecting'], false)\n        return isConnected\n    }\n\n    /**\n     * 自动重连\n     * @return {?}\n     */\n    async _autoConnect() {\n        this._log('connect: this.hasConnected =>', this.hasConnected)\n        if (this.checkIsConnected() === false) {\n            await this.redisClient.connect()\n            this._log(`connect success! now connect status change to => ${this.hasConnected}`)\n        }\n    }\n\n    /**\n     * 自动断开\n     * @return {?}\n     */\n    async _autoDisconnect() {\n        await this._debounceDisconnect()\n    }\n\n    /**\n     * 打印日志\n     * @return {?}\n     */\n    _log() {\n        if (this.isTest) {\n            Logger.log(...arguments)\n        }\n    }\n\n    /**\n     * 获取key\n     * @param {*} key \n     */\n    async asyncGet(key) {\n        await this._autoConnect()\n        let resultJson = await this.redisClient.get(key).catch(e => {\n            Logger.log('Redis异常=>')\n            Logger.log(e)\n            return ''\n        })\n        await this._autoDisconnect()\n        return result\n    }\n\n    /**\n     * 设值\n     * @param {*} key \n     * @param {*} expire \n     * @param {*} value \n     */\n    async asyncSetex(key, expire, value) {\n        this._autoConnect()\n        let valueJSON = JSON.stringify(value)\n        let result = await this.redisClient.setex(key, expire, valueJSON).catch(e => {\n            Logger.log('Redis异常=>')\n            Logger.log(e)\n        })\n        await this._autoDisconnect()\n        return result\n    }\n\n}\n\nlet client = new RedisClient()\n\nexport default client"],"file":"index.js"}